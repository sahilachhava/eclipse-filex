{
  "expand": "schema,names",
  "startAt": 0,
  "maxResults": 52,
  "total": 52,
  "issues": [
    {
      "id": "20001",
      "key": "REQ-DOC-001",
      "fields": {
        "summary": "Build system must support CMake version 3.13 or later with Ninja",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Build system must support CMake version 3.13 or later with Ninja build system. This ensures modern build capabilities and cross-platform compilation support.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20002",
      "key": "REQ-DOC-002",
      "fields": {
        "summary": "Must support Arm GNU Toolchain for arm-none-eabi compilation",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must support Arm GNU Toolchain for arm-none-eabi compilation. This provides the necessary compiler infrastructure for ARM-based embedded systems.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20003",
      "key": "REQ-DOC-003",
      "fields": {
        "summary": "ThreadX RTOS must be built and linked as mandatory dependency",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "ThreadX RTOS must be built and linked as a mandatory dependency. FileX requires ThreadX kernel services for thread synchronization and memory management.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20004",
      "key": "REQ-DOC-004",
      "fields": {
        "summary": "Must support multiple ARM Cortex processors with port-specific implementations",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must support multiple ARM Cortex processors with port-specific implementations. Architecture-specific code ensures optimal performance across different microcontroller families.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20005",
      "key": "REQ-DOC-005",
      "fields": {
        "summary": "Must implement FAT-compatible file system supporting multiple formats",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must implement FAT-compatible file system supporting FAT12, FAT16, FAT32, and exFAT formats. This ensures compatibility with standard storage media and desktop systems.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20006",
      "key": "REQ-DOC-006",
      "fields": {
        "summary": "Must provide high-performance operation with small memory footprint",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must provide high-performance operation with small memory footprint for deeply embedded applications. Real-time performance is critical for embedded system responsiveness.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20007",
      "key": "REQ-DOC-007",
      "fields": {
        "summary": "Must support multiple storage media types",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must support RAM, SD Card, USB storage via USBX, and NAND/NOR flash via LevelX. Multiple storage media support enables flexible system designs.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20008",
      "key": "REQ-DOC-008",
      "fields": {
        "summary": "Must provide standard file operations",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must provide standard file operations including create, open, read, write, close, and delete. Complete file system API ensures application compatibility.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20009",
      "key": "REQ-DOC-009",
      "fields": {
        "summary": "Must support directory operations",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must support directory operations including create, delete, rename, and search functionality. Directory management is essential for organized file storage.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20010",
      "key": "REQ-DOC-010",
      "fields": {
        "summary": "Must support long filenames with Unicode support",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must support long filenames up to 256 characters (configurable) with Unicode support. Extended filename support improves usability and internationalization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20011",
      "key": "REQ-DOC-011",
      "fields": {
        "summary": "Must provide file attribute management and extended operations",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must provide file attribute management and extended allocation operations. Advanced file operations enable sophisticated storage management.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20012",
      "key": "REQ-DOC-012",
      "fields": {
        "summary": "Must support configurable sector cache",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must support configurable sector cache with minimum 2 sectors in power-of-2 increments. Efficient caching improves file system performance and reduces media access.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20013",
      "key": "REQ-DOC-013",
      "fields": {
        "summary": "Must implement configurable FAT cache",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must implement configurable FAT cache with minimum 8 entries in power-of-2 sizes. FAT caching reduces repeated metadata reads and improves directory operations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20014",
      "key": "REQ-DOC-014",
      "fields": {
        "summary": "Must provide deterministic operation timing for real-time systems",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must provide deterministic operation timing suitable for real-time systems. Predictable performance is essential for real-time application requirements.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20015",
      "key": "REQ-DOC-015",
      "fields": {
        "summary": "Must integrate with ThreadX timer services",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must integrate with ThreadX timer services with configurable update rates. System time synchronization ensures accurate file timestamps.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20016",
      "key": "REQ-DOC-016",
      "fields": {
        "summary": "Must be safety certified for real-time applications",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must be safety certified for real-time applications under Eclipse Foundation governance. Safety certification ensures reliability in critical embedded systems.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20017",
      "key": "REQ-DOC-017",
      "fields": {
        "summary": "Must be released under MIT License as open source software",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must be released under MIT License as vendor-neutral open source software. Open source licensing enables broad adoption and community contributions.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20018",
      "key": "REQ-DOC-018",
      "fields": {
        "summary": "Must provide fault-tolerant file system operations",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must provide fault-tolerant file system operations with power-failure recovery. Data integrity protection prevents corruption during unexpected power loss.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20019",
      "key": "REQ-DOC-019",
      "fields": {
        "summary": "Must include media check and repair utilities",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must include media check and repair utilities for file system validation. File system maintenance tools ensure long-term data reliability.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20020",
      "key": "REQ-DOC-020",
      "fields": {
        "summary": "Must fully integrate with ThreadX RTOS kernel services",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must fully integrate with ThreadX RTOS kernel services and synchronization mechanisms. Deep integration ensures optimal performance and resource sharing.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30001",
      "key": "REQ-CODE-001",
      "fields": {
        "summary": "Maximum long filename length shall be 256 characters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Maximum long filename length shall be 256 characters with minimum value of 13. This is enforced by FX_MAX_LONG_NAME_LEN constant and validation checks throughout the codebase.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30002",
      "key": "REQ-CODE-002",
      "fields": {
        "summary": "Maximum sector cache size shall be 256 sectors with minimum of 2",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Maximum sector cache size shall be 256 sectors with minimum of 2 sectors required in power-of-2 increments. Defined by FX_MAX_SECTOR_CACHE constant and validated in media initialization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30003",
      "key": "REQ-CODE-003",
      "fields": {
        "summary": "Maximum FAT cache entries shall be 16 with minimum of 8",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Maximum FAT cache entries shall be 16 with minimum of 8 required in power-of-2 sizes. Enforced by FX_MAX_FAT_CACHE constant for performance optimization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30004",
      "key": "REQ-CODE-004",
      "fields": {
        "summary": "Directory entry size shall be exactly 32 bytes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Directory entry size shall be exactly 32 bytes as defined by FX_DIR_ENTRY_SIZE. This matches the FAT directory entry structure specification.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30005",
      "key": "REQ-CODE-005",
      "fields": {
        "summary": "FAT12 maximum cluster count shall be 4086 clusters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT12 maximum cluster count shall be 4086 clusters as defined by FX_12_BIT_FAT_SIZE. This determines when to use FAT12 vs FAT16 format.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30006",
      "key": "REQ-CODE-006",
      "fields": {
        "summary": "FAT16 maximum cluster count shall be 65525 clusters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT16 maximum cluster count shall be 65525 clusters as defined by FX_16_BIT_FAT_SIZE. Critical for format determination logic.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30007",
      "key": "REQ-CODE-007",
      "fields": {
        "summary": "Boot sector signature validation shall verify specific bytes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Boot sector signature validation shall verify bytes 0x55 and 0xAA at offset 0x1FE. Required for valid FAT media detection.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30008",
      "key": "REQ-CODE-008",
      "fields": {
        "summary": "FAT entry start position shall be cluster 2",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT entry start position shall be cluster 2 as defined by FX_FAT_ENTRY_START. Clusters 0 and 1 are reserved in FAT specification.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30009",
      "key": "REQ-CODE-009",
      "fields": {
        "summary": "File write operations shall verify write mode before allowing writes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File write operations shall verify file is opened in write mode before allowing writes. Enforced through open_type validation in file operations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30010",
      "key": "REQ-CODE-010",
      "fields": {
        "summary": "File operations shall verify media ID before proceeding",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File operations shall verify media ID matches FX_MEDIA_ID before proceeding. Prevents operations on uninitialized or corrupt media structures.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30011",
      "key": "REQ-CODE-011",
      "fields": {
        "summary": "FAT chain integrity validation shall detect infinite loops",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT chain integrity validation shall detect infinite loops by limiting cluster count to total media clusters. Prevents system hang on corrupt FAT chains.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30012",
      "key": "REQ-CODE-012",
      "fields": {
        "summary": "File write operations shall enforce 4GB file size limit",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File write operations shall verify current file offset plus write size does not exceed 4GB limit. Enforced by 32-bit file size limitations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30013",
      "key": "REQ-CODE-013",
      "fields": {
        "summary": "Media open shall require minimum 512 byte memory buffer",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Media open shall require minimum memory buffer size of 512 bytes and at least one sector size. Validated in fx_media_open implementation.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30014",
      "key": "REQ-CODE-014",
      "fields": {
        "summary": "Sector cache hash function shall be enabled for large caches",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Sector cache hash function shall be enabled when cache size exceeds 16 sectors. Implemented via FX_SECTOR_CACHE_HASH_ENABLE for performance.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30015",
      "key": "REQ-CODE-015",
      "fields": {
        "summary": "FAT cache shall use 4-entry hash buckets",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT cache shall use 4-entry hash buckets as defined by FX_FAT_CACHE_DEPTH. Fixed depth required by cache management algorithms.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30016",
      "key": "REQ-CODE-016",
      "fields": {
        "summary": "Bytes per cluster calculation shall prevent division by zero",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Bytes per cluster calculation shall validate result is not zero to prevent division by zero errors. Critical validation in media initialization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30017",
      "key": "REQ-CODE-017",
      "fields": {
        "summary": "Write operations shall check media write protection flag",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Write operations shall check media-level write protection flag before proceeding. Prevents writes to read-only media.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30018",
      "key": "REQ-CODE-018",
      "fields": {
        "summary": "File open for write shall verify file is not read-only",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File open for write shall verify file does not have read-only attribute set. Enforced through file attribute checking.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30019",
      "key": "REQ-CODE-019",
      "fields": {
        "summary": "Multiple file access control shall prevent concurrent writes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Multiple file access control shall prevent opening same file for write if already open for write. Implemented through file control block tracking.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30020",
      "key": "REQ-CODE-020",
      "fields": {
        "summary": "Directory creation shall verify cluster availability",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Directory creation shall verify at least one cluster is available before proceeding. Prevents creation when no space available.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30021",
      "key": "REQ-CODE-021",
      "fields": {
        "summary": "Directory name validation shall reject invalid length names",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Directory name validation shall reject names with length 0 or exceeding FX_MAX_LONG_NAME_LEN. Input validation throughout directory operations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30022",
      "key": "REQ-CODE-022",
      "fields": {
        "summary": "Media boot sector validation shall verify all critical FAT parameters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Media boot sector validation shall verify all critical FAT parameters before accepting media. Comprehensive validation in boot info extraction.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30023",
      "key": "REQ-CODE-023",
      "fields": {
        "summary": "File operations shall return standardized error codes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File operations shall return specific error codes including FX_SUCCESS, FX_NOT_OPEN, FX_ACCESS_ERROR. Standardized error reporting interface.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30024",
      "key": "REQ-CODE-024",
      "fields": {
        "summary": "FAT entry values shall distinguish between cluster types",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT entry values shall distinguish between free clusters, bad clusters, and end-of-chain markers. Uses specific constants for each cluster type.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30025",
      "key": "REQ-CODE-025",
      "fields": {
        "summary": "Fault tolerant log file maximum size shall be 3072 bytes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Fault tolerant log file maximum size shall be 3072 bytes as defined by FX_FAULT_TOLERANT_MAXIMUM_LOG_FILE_SIZE. Limits memory usage for fault tolerance.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30026",
      "key": "REQ-CODE-026",
      "fields": {
        "summary": "Fault tolerant operations shall maintain transaction states",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Fault tolerant operations shall maintain transaction states for recovery on failure. Implements state machine with defined states.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30027",
      "key": "REQ-CODE-027",
      "fields": {
        "summary": "Fault tolerant log shall include checksum validation",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Fault tolerant log shall include header checksum and content validation. Ensures log integrity for reliable recovery.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30028",
      "key": "REQ-CODE-028",
      "fields": {
        "summary": "Fault tolerant boot sector shall store log file cluster number",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Fault tolerant boot sector shall store log file cluster number at reserved byte offset 116-119. Uses FAT reserved area for persistence.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30029",
      "key": "REQ-CODE-029",
      "fields": {
        "summary": "Driver interface shall support standard command set",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Driver interface shall support standard commands including READ, WRITE, FLUSH, ABORT, INIT, BOOT_READ, RELEASE_SECTORS, BOOT_WRITE, UNINIT. Complete driver command set.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30030",
      "key": "REQ-CODE-030",
      "fields": {
        "summary": "Driver status shall be checked after each operation",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Driver status shall be checked after each operation and return FX_SUCCESS for successful completion. Mandatory error checking pattern.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30031",
      "key": "REQ-CODE-031",
      "fields": {
        "summary": "Driver shall support sector type indicators",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Driver shall support sector type indicators for BOOT_SECTOR, FAT_SECTOR, DIRECTORY_SECTOR, DATA_SECTOR. Enables driver optimizations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30032",
      "key": "REQ-CODE-032",
      "fields": {
        "summary": "Thread safety shall be enforced through mutex protection",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Thread safety shall be enforced through mutex protection when not in single-thread mode. Uses fx_media_protect mutex for synchronization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20021",
      "key": "REQ-DOC-021",
      "fields": {
        "summary": "Must maintain compatibility with ThreadX ecosystem components",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must maintain compatibility with ThreadX ecosystem components (NetX Duo, GUIX, USBX, LevelX). Component interoperability enables comprehensive embedded solutions.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20022",
      "key": "REQ-DOC-022",
      "fields": {
        "summary": "Must support integration with major semiconductor SDKs",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must support integration with major semiconductor SDKs from STM, NXP, Renesas, and Microchip. Vendor SDK integration simplifies development and deployment.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "20023",
      "key": "REQ-DOC-023",
      "fields": {
        "summary": "Must provide CMake-based composable build system",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Must provide CMake-based composable build system supporting git submodules. Modern build infrastructure enables easy project integration and dependency management.",
        "verifiableByCodeOnly": true
      }
    }
  ]
}