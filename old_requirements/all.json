{
  "expand": "schema,names",
  "startAt": 0,
  "maxResults": 62,
  "total": 62,
  "issues": [
    {
      "id": "30001",
      "key": "REQ-DOC-001",
      "fields": {
        "summary": "FileX must provide high-performance FAT-compatible file system for embedded applications",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall be a complete FAT format media and file management system designed specifically for deeply embedded, real-time, and IoT applications.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30002",
      "key": "REQ-DOC-002",
      "fields": {
        "summary": "System must support FAT12, FAT16, and FAT32 file system formats",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall support all FAT file system formats including 12-bit, 16-bit, and 32-bit File Allocation Table formats with multiple partition support.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30003",
      "key": "REQ-DOC-003",
      "fields": {
        "summary": "Memory footprint must be minimal with 6-30KB ROM and 100 bytes RAM",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall require between 6-30 KBytes of ROM and only 100 bytes of RAM for global data structures to ensure suitability for embedded systems.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30004",
      "key": "REQ-DOC-004",
      "fields": {
        "summary": "System must support unlimited number of media devices simultaneously",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall support an unlimited number of media devices including RAM disks, FLASH managers, and physical devices operating simultaneously.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30005",
      "key": "REQ-DOC-005",
      "fields": {
        "summary": "System must support both 8.3 and Long File Name formats up to 256 characters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall support standard 8.3 character filenames and Windows Long File Names with Unicode support up to 256 characters maximum.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30006",
      "key": "REQ-DOC-006",
      "fields": {
        "summary": "System must provide contiguous file allocation for deterministic performance",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall offer contiguous file support through fx_file_allocate service to improve and make file access time deterministic for performance-critical applications.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30007",
      "key": "REQ-DOC-007",
      "fields": {
        "summary": "System must implement logical sector cache for performance optimization",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall maintain a logical sector cache using most-recently-used algorithm to significantly improve performance by reducing sector transfers.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30008",
      "key": "REQ-DOC-008",
      "fields": {
        "summary": "System must support complete ThreadX processor integration",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide complete integration with ThreadX RTOS and support all processors supported by Eclipse ThreadX with no run-time royalties.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30009",
      "key": "REQ-DOC-009",
      "fields": {
        "summary": "System must provide fault tolerant support to prevent corruption",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall include optional fault tolerant module to prevent file system corruption from interruptions during file or directory updates.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30010",
      "key": "REQ-DOC-010",
      "fields": {
        "summary": "System must comply with IEC-61508 SIL 4 safety certification",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall be certified by SGS-TÃœV Saar for use in safety-critical systems according to IEC-61508 SIL 4 standards.",
        "verifiableByCodeOnly": false
      }
    },
    {
      "id": "30011",
      "key": "REQ-DOC-011",
      "fields": {
        "summary": "System must provide comprehensive media management API services",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide intuitive media access APIs including fx_media_open, fx_media_close, fx_media_format, and fx_media_space_available services.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30012",
      "key": "REQ-DOC-012",
      "fields": {
        "summary": "System must provide complete directory management services",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide directory services including create, delete, navigation, attribute management with support for up to 256 byte paths.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30013",
      "key": "REQ-DOC-013",
      "fields": {
        "summary": "System must provide comprehensive file management services",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide file services including create, delete, read, write, seek operations with support for unlimited open files and fast seek logic.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30014",
      "key": "REQ-DOC-014",
      "fields": {
        "summary": "System must support multiple media types including RAM, FLASH, and SD cards",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall support various physical media including RAM, USBX, SD cards, and NAND/NOR flash memories via LevelX integration.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30015",
      "key": "REQ-DOC-015",
      "fields": {
        "summary": "System must provide endian neutral operation for portability",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall operate in endian neutral manner to ensure compatibility across different processor architectures and byte ordering schemes.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30016",
      "key": "REQ-DOC-016",
      "fields": {
        "summary": "System must support dynamic object creation and deletion",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall allow dynamic creation and deletion of system resources with no predetermined limits on number of objects.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30017",
      "key": "REQ-DOC-017",
      "fields": {
        "summary": "System must implement internal FAT entry cache for performance",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall maintain an internal FAT entry cache with configurable size (default 16 entries) to optimize FAT table access performance.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30018",
      "key": "REQ-DOC-018",
      "fields": {
        "summary": "System must provide simple I/O driver interface for media integration",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide easy-to-implement I/O driver interface with simple read/write logical sector operations for media device integration.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30019",
      "key": "REQ-DOC-019",
      "fields": {
        "summary": "System must support configurable compilation options for customization",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide extensive configuration options including cache sizes, filename lengths, and feature enable/disable flags for optimization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30020",
      "key": "REQ-DOC-020",
      "fields": {
        "summary": "System must provide standalone operation mode without ThreadX",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall support standalone operation mode through FX_STANDALONE_ENABLE definition for use without Eclipse ThreadX RTOS dependency.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30021",
      "key": "REQ-DOC-021",
      "fields": {
        "summary": "System must implement automatic time and date stamping capabilities",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide automatic time and date stamping for files using ThreadX timer facilities with periodic system time updates.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30022",
      "key": "REQ-DOC-022",
      "fields": {
        "summary": "System must support write protection and free sector notifications",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide dynamic write protection capability and free sector update notifications for FLASH memory management optimization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30023",
      "key": "REQ-DOC-023",
      "fields": {
        "summary": "System must support global and local path management",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide both global default path for media and thread-specific local paths to allow different threads unique paths without conflict.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30024",
      "key": "REQ-DOC-024",
      "fields": {
        "summary": "System must implement callback functions for media and file operations",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide callback functions for media open/close and file write events to notify applications when such events occur.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30025",
      "key": "REQ-DOC-025",
      "fields": {
        "summary": "System must provide built-in performance statistics and TraceX support",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall include built-in performance statistics collection and TraceX system analysis support for performance monitoring and debugging.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30026",
      "key": "REQ-DOC-026",
      "fields": {
        "summary": "System must support 64-bit sector addressing for large media",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall support 64-bit sector addresses in I/O drivers through FX_DRIVER_USE_64BIT_LBA option for large media device support.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30027",
      "key": "REQ-DOC-027",
      "fields": {
        "summary": "System must provide complete ANSI C source code with no royalties",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall be distributed with complete ANSI C source code and have no run-time royalties for commercial and embedded applications.",
        "verifiableByCodeOnly": false
      }
    },
    {
      "id": "30028",
      "key": "REQ-DOC-028",
      "fields": {
        "summary": "System must support error detection and recovery mechanisms",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall implement comprehensive error detection and recovery mechanisms to maintain file system integrity and handle exceptional conditions.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30029",
      "key": "REQ-DOC-029",
      "fields": {
        "summary": "System must support flexible memory usage and automatic scaling",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall provide flexible memory usage patterns and automatic size scaling based on application requirements and available system resources.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "30030",
      "key": "REQ-DOC-030",
      "fields": {
        "summary": "System must integrate with LevelX for FLASH wear leveling",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FileX shall support integration with LevelX NOR/NAND FLASH wear leveling product to extend FLASH memory lifespan in embedded applications.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40001",
      "key": "REQ-CODE-001",
      "fields": {
        "summary": "Maximum long filename length shall be 256 characters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Maximum long filename length shall be 256 characters with minimum value of 13. This is enforced by FX_MAX_LONG_NAME_LEN constant and validation checks throughout the codebase.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40002",
      "key": "REQ-CODE-002",
      "fields": {
        "summary": "Maximum sector cache size shall be 256 sectors with minimum of 2",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Maximum sector cache size shall be 256 sectors with minimum of 2 sectors required in power-of-2 increments. Defined by FX_MAX_SECTOR_CACHE constant and validated in media initialization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40003",
      "key": "REQ-CODE-003",
      "fields": {
        "summary": "Maximum FAT cache entries shall be 16 with minimum of 8",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Maximum FAT cache entries shall be 16 with minimum of 8 required in power-of-2 sizes. Enforced by FX_MAX_FAT_CACHE constant for performance optimization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40004",
      "key": "REQ-CODE-004",
      "fields": {
        "summary": "Directory entry size shall be exactly 32 bytes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Directory entry size shall be exactly 32 bytes as defined by FX_DIR_ENTRY_SIZE. This matches the FAT directory entry structure specification.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40005",
      "key": "REQ-CODE-005",
      "fields": {
        "summary": "FAT12 maximum cluster count shall be 4086 clusters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT12 maximum cluster count shall be 4086 clusters as defined by FX_12_BIT_FAT_SIZE. This determines when to use FAT12 vs FAT16 format.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40006",
      "key": "REQ-CODE-006",
      "fields": {
        "summary": "FAT16 maximum cluster count shall be 65525 clusters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT16 maximum cluster count shall be 65525 clusters as defined by FX_16_BIT_FAT_SIZE. Critical for format determination logic.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40007",
      "key": "REQ-CODE-007",
      "fields": {
        "summary": "Boot sector signature validation shall verify specific bytes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Boot sector signature validation shall verify bytes 0x55 and 0xAA at offset 0x1FE. Required for valid FAT media detection.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40008",
      "key": "REQ-CODE-008",
      "fields": {
        "summary": "FAT entry start position shall be cluster 2",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT entry start position shall be cluster 2 as defined by FX_FAT_ENTRY_START. Clusters 0 and 1 are reserved in FAT specification.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40009",
      "key": "REQ-CODE-009",
      "fields": {
        "summary": "File write operations shall verify write mode before allowing writes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File write operations shall verify file is opened in write mode before allowing writes. Enforced through open_type validation in file operations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40010",
      "key": "REQ-CODE-010",
      "fields": {
        "summary": "File operations shall verify media ID before proceeding",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File operations shall verify media ID matches FX_MEDIA_ID before proceeding. Prevents operations on uninitialized or corrupt media structures.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40011",
      "key": "REQ-CODE-011",
      "fields": {
        "summary": "FAT chain integrity validation shall detect infinite loops",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT chain integrity validation shall detect infinite loops by limiting cluster count to total media clusters. Prevents system hang on corrupt FAT chains.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40012",
      "key": "REQ-CODE-012",
      "fields": {
        "summary": "File write operations shall enforce 4GB file size limit",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File write operations shall verify current file offset plus write size does not exceed 4GB limit. Enforced by 32-bit file size limitations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40013",
      "key": "REQ-CODE-013",
      "fields": {
        "summary": "Media open shall require minimum 512 byte memory buffer",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Media open shall require minimum memory buffer size of 512 bytes and at least one sector size. Validated in fx_media_open implementation.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40014",
      "key": "REQ-CODE-014",
      "fields": {
        "summary": "Sector cache hash function shall be enabled for large caches",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Sector cache hash function shall be enabled when cache size exceeds 16 sectors. Implemented via FX_SECTOR_CACHE_HASH_ENABLE for performance.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40015",
      "key": "REQ-CODE-015",
      "fields": {
        "summary": "FAT cache shall use 4-entry hash buckets",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT cache shall use 4-entry hash buckets as defined by FX_FAT_CACHE_DEPTH. Fixed depth required by cache management algorithms.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40016",
      "key": "REQ-CODE-016",
      "fields": {
        "summary": "Bytes per cluster calculation shall prevent division by zero",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Bytes per cluster calculation shall validate result is not zero to prevent division by zero errors. Critical validation in media initialization.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40017",
      "key": "REQ-CODE-017",
      "fields": {
        "summary": "Write operations shall check media write protection flag",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Write operations shall check media-level write protection flag before proceeding. Prevents writes to read-only media.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40018",
      "key": "REQ-CODE-018",
      "fields": {
        "summary": "File open for write shall verify file is not read-only",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File open for write shall verify file does not have read-only attribute set. Enforced through file attribute checking.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40019",
      "key": "REQ-CODE-019",
      "fields": {
        "summary": "Multiple file access control shall prevent concurrent writes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Multiple file access control shall prevent opening same file for write if already open for write. Implemented through file control block tracking.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40020",
      "key": "REQ-CODE-020",
      "fields": {
        "summary": "Directory creation shall verify cluster availability",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Directory creation shall verify at least one cluster is available before proceeding. Prevents creation when no space available.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40021",
      "key": "REQ-CODE-021",
      "fields": {
        "summary": "Directory name validation shall reject invalid length names",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Directory name validation shall reject names with length 0 or exceeding FX_MAX_LONG_NAME_LEN. Input validation throughout directory operations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40022",
      "key": "REQ-CODE-022",
      "fields": {
        "summary": "Media boot sector validation shall verify all critical FAT parameters",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Media boot sector validation shall verify all critical FAT parameters before accepting media. Comprehensive validation in boot info extraction.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40023",
      "key": "REQ-CODE-023",
      "fields": {
        "summary": "File operations shall return standardized error codes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "File operations shall return specific error codes including FX_SUCCESS, FX_NOT_OPEN, FX_ACCESS_ERROR. Standardized error reporting interface.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40024",
      "key": "REQ-CODE-024",
      "fields": {
        "summary": "FAT entry values shall distinguish between cluster types",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "FAT entry values shall distinguish between free clusters, bad clusters, and end-of-chain markers. Uses specific constants for each cluster type.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40025",
      "key": "REQ-CODE-025",
      "fields": {
        "summary": "Fault tolerant log file maximum size shall be 3072 bytes",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Fault tolerant log file maximum size shall be 3072 bytes as defined by FX_FAULT_TOLERANT_MAXIMUM_LOG_FILE_SIZE. Limits memory usage for fault tolerance.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40026",
      "key": "REQ-CODE-026",
      "fields": {
        "summary": "Fault tolerant operations shall maintain transaction states",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Fault tolerant operations shall maintain transaction states for recovery on failure. Implements state machine with defined states.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40027",
      "key": "REQ-CODE-027",
      "fields": {
        "summary": "Fault tolerant log shall include checksum validation",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Fault tolerant log shall include header checksum and content validation. Ensures log integrity for reliable recovery.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40028",
      "key": "REQ-CODE-028",
      "fields": {
        "summary": "Fault tolerant boot sector shall store log file cluster number",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Fault tolerant boot sector shall store log file cluster number at reserved byte offset 116-119. Uses FAT reserved area for persistence.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40029",
      "key": "REQ-CODE-029",
      "fields": {
        "summary": "Driver interface shall support standard command set",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Driver interface shall support standard commands including READ, WRITE, FLUSH, ABORT, INIT, BOOT_READ, RELEASE_SECTORS, BOOT_WRITE, UNINIT. Complete driver command set.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40030",
      "key": "REQ-CODE-030",
      "fields": {
        "summary": "Driver status shall be checked after each operation",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Driver status shall be checked after each operation and return FX_SUCCESS for successful completion. Mandatory error checking pattern.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40031",
      "key": "REQ-CODE-031",
      "fields": {
        "summary": "Driver shall support sector type indicators",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Driver shall support sector type indicators for BOOT_SECTOR, FAT_SECTOR, DIRECTORY_SECTOR, DATA_SECTOR. Enables driver optimizations.",
        "verifiableByCodeOnly": true
      }
    },
    {
      "id": "40032",
      "key": "REQ-CODE-032",
      "fields": {
        "summary": "Thread safety shall be enforced through mutex protection",
        "issuetype": {
          "id": "100",
          "description": "Software design requirement",
          "name": "Requirement"
        },
        "status": {
          "id": "approved",
          "name": "Approved"
        },
        "assignee": {
          "displayName": "Unassigned",
          "accountId": "unassigned"
        },
        "reporter": {
          "displayName": "System",
          "accountId": "system"
        },
        "description": "Thread safety shall be enforced through mutex protection when not in single-thread mode. Uses fx_media_protect mutex for synchronization.",
        "verifiableByCodeOnly": true
      }
    }
  ]
}